#+title: Doom Emacs Configuration
#+author: Yu Li
#+email: jamesyuli@outlook.com
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comment no
#+startup: overview

* Headers
** Init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

#+RESULTS:

** Package.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
** Config.el
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Doom Modules
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;; (helm              ; the *other* search engine for love and life
       ;;  +icons
       ;;  +fuzzy)
       ;;ido               ; the other *other* search engine...
       ;; (ivy              ; a search engine for love and life
       ;;  +fuzzy
       ;;  +icons
       ;;  +childframe)
       (vertico           ; the search engine of the future
        +icons)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;; indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;; tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       format  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;; multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired             ; making dired pretty [functional]
        +icon
        +ranger)
       electric          ; smarter, keyword-based electric-indent
       ;; ibuffer         ; interactive buffer management
       (undo              ; persistent, smarter undo for your inevitable mistakes
        +tree)
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;; eshell            ; the elisp shell that works everywhere
       ;; shell             ; simple shell REPL for Emacs
       ;; term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;; gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp               ; M-x vscode
        +peek)
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;; common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript        ; all(hope(abandon(ye(who(enter(here))))))
        +lsp
        +tree-sitter)
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex             ; writing papers in Emacs has never been so fun
        +cdlatex
        +lsp)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       (markdown          ; writing docs for people to ignore
        +grip)
       ;;nim               ; python + lisp at the speed of c
       ;; nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        +dragndrop
        +hugo
        +noter
        +pandoc
        +pomodoro
        +pretty
        +roam2)
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;; python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust
        +lsp
        +tree-sitter)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web               ; the tubes
        +lsp
        +tree-sitter)
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;; (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

#+RESULTS:
**
* General
** User Information
#+begin_src emacs-lisp
(setq user-full-name "James"
      user-mail-address "jamesyuli@outlook.com")
#+end_src
** UI
*** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Sarasa Term SC Nerd" :size 15 :weight 'Semibold)
      doom-variable-pitch-font (font-spec :family "Noto Sans CJK SC" :size 15)
      doom-unicode-font (font-spec :family "Symbols Nerd Font Mono" :size 16))
#+end_src
*** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+end_src
*** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Key Binds
#+begin_src emacs-lisp
(map! "C-h" 'switch-to-prev-buffer)
(map! "C-l" 'switch-to-next-buffer)
(map! "C-S-l" 'recenter-top-bottom)
#+end_src
** Which Key
#+begin_src emacs-lisp
;; (setq which-key-idle-delay 0.2)
(setq auto-save-visited-interval 15)
(auto-save-visited-mode +1)
#+end_src
* Org Mode
** Basic
*** Directory
#+begin_src emacs-lisp
(setq org-directory "~/denote")
#+end_src
*** Capture Template
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        `(("t" "Todo" entry (file "~/denote/meta/todo.org")
           "* TODO %U %?" :empty-lines-after 1)
          ("i" "Inbox" entry (file "~/denote/meta/inbox.org")
           "* %t %?" :empty-lines-after 1)
          ;; ("w" "Work" entry (file "~/org/work.org")
          ;;  "* %t %?  %(org-set-tags \"work\")" :empty-lines-after 1)
          ;; ("j" "Journal" entry (file+datetree "~/org/journal.org")
          ;;  "* %?" :jump-to-captured t :time-prompt t)
          )))
#+end_src
*** Babel
#+begin_src emacs-lisp
(after! org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (conf-toml . t)
     (rust . t)
     )))
#+end_src
*** Appearance
#+begin_src emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t)
  (setq org-pretty-entities t))
#+end_src
*** Disable Format-On-Save
#+begin_src emacs-lisp
(setq +format-on-save-disabled-modes
      '(org-mode))
#+end_src
*** Pomodoro
#+begin_src emacs-lisp
(setq org-pomodoro-length 30)
#+end_src
** Agenda
*** Directory
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/denote" "~/denote/journal")))
#+end_src
** Extension Packages
*** Auto List
**** Package
#+begin_src emacs-lisp :tangle packages.el
(package! org-autolist)
#+end_src
**** Configuration
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (org-autolist-mode)))
#+end_src
*** Org Appear
**** Package
#+begin_src emacs-lisp :tangle packages.el
(package! org-appear)
#+end_src
**** Configuration
#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src
*** Org Super Links =DISABLED=
**** Package
#+begin_src emacs-lisp :tangle no
(package! org-super-links
  :recipe (:host github :repo "toshism/org-super-links" :branch "develop"))
#+end_src
**** Configuration
***** Generate Org ID Automatically
#+begin_src emacs-lisp :tangle no
(require 'org-id)
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src
**** Key Binds
#+begin_src emacs-lisp :tangle no
(map! :leader
      (:prefix-map ("d" . "denote")
        (:prefix ("l" . "superlinks")
                 :desc "create superlink" "l" #'org-super-links-link
                 :desc "delete superlink" "d" #'org-super-links-delete-link
                 :desc "convert to superlink" "c" #'org-super-links-covert-link-to-super
                 :desc "store superlink" "s" #'org-super-links-store-link
                 :desc "insert superlink" "i" #'org-super-links-insert-link)))
#+end_src
*** Org Modern =DISABLED=
**** Package
#+begin_src emacs-lisp :tangle no
(package! org-modern)
#+end_src
**** Configuration
#+begin_src emacs-lisp :tangle no
(after! org
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?â”€
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " â”„â”„â”„â”„â”„ " "â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„")
   org-agenda-current-time-string
   "â—€â”€â”€ now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")

  ;; Ellipsis styling
  (setq org-ellipsis "â€¦")
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
  (global-org-modern-mode))
#+end_src
*** Org Habit Status =DISABLED=
**** Package
#+begin_src emacs-lisp :tangle no
(package! org-habit-status)
#+end_src
**** Configuration
#+begin_src emacs-lisp :tangle no
(map! :map org-mode-map
      "C-c h" 'org-habit-stats-view-habit-at-point)
(map! :map org-agenda-mode-map
      "H" 'org-habit-stats-view-habit-at-point-agenda)
(add-hook 'org-after-todo-state-change-hook 'org-habit-stats-update-properties)
#+end_src

* Denote
** Core
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! denote)
#+end_src
*** Configuration
#+begin_src emacs-lisp
(after! denote
  (setq denote-directory "~/denote")
  (setq denote-known-keywords nil)
  (setq denote-date-prompt-use-org-read-date t))
#+end_src
*** Key Binds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "new note" "n" #'denote
       :desc "new note + date" "N" #'denote-date
       ;; :desc "new note in subdir" "s" #'denote-subdirectory
       :desc "list all notes" "D" #'denote-menu-list-notes
       :desc "open/create note" "d" #'denote-open-or-create
       :desc "find link" "l" #'denote-find-link
       :desc "backlinks" "b" #'denote-backlinks
       :desc "backlink for heading" "B" #'denote-org-extras-link-to-heading
       :desc "find/create journal" "j" #'denote-journal-new-or-existing-entry
       :desc "find/create journal w/date" "J" #'(lambda ()
                                                  (interactive)
                                                  (let ((current-prefix-arg '(4)))
                                                    (call-interactively #'denote-journal-new-or-existing-entry)))
       :desc "template" "t" #'denote-template
       (:prefix ("i" . "insert")
        :desc "insert/create link" "l" #'denote-link-or-create
        :desc "insert/create link in bg" "L" #'denote-link-after-creating
        :desc "insert front matter" "f" #'denote-add-front-matter
        :desc "insert heading link" "h" #'denote-org-extras-link-to-heading
        :desc "insert journal link" "j" #'denote-journal-extras-link-or-create-entry
        :desc "insert journal link w/date" "J" #'(lambda ()
                                                   (interactive)
                                                   (let ((current-prefix-arg '(4)))
                                                     (call-interactively #'denote-journal-extras-link-or-create-entry)))
        :desc "insert link matching REGEXP" "r" #'denote-add-links
        (:prefix ("d" . "dynamic blocks")
                  :desc "links" "l" #'denote-org-extras-dblock-insert-links
                  :desc "backlinks" "b" #'denote-org-extras-dblock-insert-backlinks
                  :desc "files" "f" #'denote-org-extras-dblock-insert-files
                  :desc "missing links" "m" #'denote-org-extras-dblock-insert-missing-links))
       (:prefix ("r" . "rename")
        :desc "rename note" "r" #'denote-rename-file
        :desc "rename keyword" "k" #'denote-rename-file-keywords
        :desc "rename signature" "s" #'denote-rename-file-signature
        :desc "rename front matter" "f" #'denote-rename-file-using-front-matter
        :desc "rename title" "t" #'denote-rename-file-title)))
#+end_src
** Menu
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! denote-menu)
#+end_src
** Explore
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! denote-explore)
#+end_src
** Consult
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! consult-denote)
#+end_src
*** Key Binds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "Search notes" "s" #'consult-denote-find
       :desc "Search notes w/grep" "S"
       #'consult-denote-grep))
#+end_src
** Journal
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! denote-journal
  :recipe (:host github :repo "protesilaos/denote-journal" :branch "main"))
#+end_src
*** Key Binds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "find/create journal" "j" #'denote-journal-new-or-existing-entry
       :desc "find/create journal w/date" "J" #'(lambda ()
                                                  (interactive)
                                                  (let ((current-prefix-arg '(4)))
                                                    (call-interactively #'denote-journal-new-or-existing-entry)))
       (:prefix ("i" . "insert")
        :desc "insert journal link" "j" #'denote-journal-link-or-create-entry
        :desc "insert journal link w/date" "J" #'(lambda ()
                                                   (interactive)
                                                   (let ((current-prefix-arg '(4)))
                                                     (call-interactively #'denote-journal-link-or-create-entry)))
#+end_src
* Projectile
** Add Projects
#+begin_src emacs-lisp
;; (projectile-add-known-project "~/org")
(projectile-add-known-project "~/denote")
;; (projectile-add-known-project "~/roam")
(projectile-add-known-project "~/stow")
#+end_src
