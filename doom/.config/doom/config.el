;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq user-full-name "James"
      user-mail-address "jamesyuli@outlook.com")

(setq doom-font (font-spec :family "Sarasa Term SC Nerd" :size 15 :weight 'Semibold)
      doom-variable-pitch-font (font-spec :family "Noto Sans CJK SC" :size 15)
      doom-unicode-font (font-spec :family "Symbols Nerd Font Mono" :size 16))

(setq doom-theme 'doom-gruvbox)

(setq display-line-numbers-type 'relative)

;; (map! "C-h" 'switch-to-prev-buffer)
;; (map! "C-l" 'switch-to-next-buffer)
;; (map! "C-S-l" 'recenter-top-bottom)

;; (setq which-key-idle-delay 0.2)
(setq auto-save-visited-interval 15)
(auto-save-visited-mode +1)

(setq org-directory "~/denote")

(after! org
  (setq org-capture-templates
        `(("t" "Todo" entry (file "~/denote/meta/todo.org")
           "* TODO %U %?" :empty-lines-after 1)
          ("i" "Inbox" entry (file "~/denote/meta/inbox.org")
           "* %t %?" :empty-lines-after 1)
          ;; ("w" "Work" entry (file "~/org/work.org")
          ;;  "* %t %?  %(org-set-tags \"work\")" :empty-lines-after 1)
          ;; ("j" "Journal" entry (file+datetree "~/org/journal.org")
          ;;  "* %?" :jump-to-captured t :time-prompt t)
          )))

(after! org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (conf-toml . t)
     (rust . t)
     )))

(after! org
  (setq org-hide-emphasis-markers t)
  (setq org-pretty-entities t))

;; (setq +format-on-save-disabled-modes
;;       '(org-mode))

(setq org-pomodoro-length 30)

(after! org
  (setq org-agenda-files '("~/denote" "~/denote/journal")))

(add-hook 'org-mode-hook
          (lambda () (org-autolist-mode)))

(after! org
  (add-hook 'org-mode-hook 'org-appear-mode))

(after! org
  (add-hook 'org-mode-hook 'org-auto-tangle-mode))

(setq org-auto-tangle-babel-safelist '(
                                       "~/example.org"
                                       "~/example2.org"
                                       ))

(use-package! denote
  :hook
  (dired-mode . denote-dired-mode)
  :config
  (denote-rename-buffer-mode 1)
  (setq denote-buffer-name-prefix "<NOTE> ")
  (setq denote-rename-buffer-format "[%k] %t")
  (setq denote-directory "~/denote")
  (setq denote-known-keywords nil)
  (setq denote-date-prompt-use-org-read-date t))

(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "new note" "n" #'denote
       :desc "new note + date" "N" #'denote-date
       ;; :desc "new note in subdir" "s" #'denote-subdirectory
       :desc "list all notes" "D" #'denote-menu-list-notes
       :desc "open/create note" "d" #'denote-open-or-create
       :desc "find link" "l" #'denote-find-link
       :desc "backlinks" "b" #'denote-backlinks
       :desc "backlink for heading" "B" #'denote-org-link-to-heading
       :desc "template" "t" #'denote-template
       :desc "capture region" "c" #'denote-region
       (:prefix ("i" . "insert")
        :desc "insert/create link" "l" #'denote-link-or-create
        :desc "insert/create link in bg" "L" #'denote-link-after-creating
        :desc "insert front matter" "f" #'denote-add-front-matter
        :desc "insert heading link" "h" #'denote-org-link-to-heading
        :desc "insert link matching REGEXP" "r" #'denote-add-links
        (:prefix ("d" . "dynamic blocks")
         :desc "links" "l" #'denote-org-dblock-insert-links
         :desc "backlinks" "b" #'denote-org-dblock-insert-backlinks
         :desc "files" "f" #'denote-org-dblock-insert-files
         :desc "missing links" "m" #'denote-org-dblock-insert-missing-links))
       (:prefix ("r" . "rename")
        :desc "rename note" "r" #'denote-rename-file
        :desc "rename keyword" "k" #'denote-rename-file-keywords
        :desc "rename signature" "s" #'denote-rename-file-signature
        :desc "rename front matter" "f" #'denote-rename-file-using-front-matter
        :desc "rename title" "t" #'denote-rename-file-title)))

(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "backlink for heading" "B" #'denote-org-link-to-heading
       (:prefix ("i" . "insert")
        :desc "insert heading link" "h" #'denote-org-link-to-heading
        (:prefix ("d" . "dynamic blocks")
         :desc "links" "l" #'denote-org-dblock-insert-links
         :desc "backlinks" "b" #'denote-org-dblock-insert-backlinks
         :desc "files" "f" #'denote-org-dblock-insert-files
         :desc "missing links" "m" #'denote-org-dblock-insert-missing-links))))

(use-package! denote-explore
  :after denote
  :config
  (require 'denote))

(after! denote-explore
  (map! :leader
        (:prefix ("d" . "denote")
                 (:prefix ("e" . "explore")
                  :desc "network" "n" #'denote-explore-network
                  :desc "network regenerate" "N" #'denote-explore-network-regenerate

                  (:prefix ("c" . "count")
                   :desc "notes" "n" #'denote-explore-count-notes
                   :desc "keywords" "k" #'denote-explore-count-keywords)

                  (:prefix ("b" . "bar chart")
                   :desc "file types" "f" #'denote-explore-barchart-filetypes
                   :desc "keywords" "k" #'denote-explore-barchart-keywords
                   :desc "timeline" "t" #'denote-explore-barchart-timeline
                   :desc "degree" "d" #'denote-explore-barchart-degree
                   :desc "backlinks" "b" #'denote-explore-barchart-backlinks)

                  (:prefix ("r" . "random walks")
                   :desc "note" "n" #'denote-explore-random-note
                   :desc "regex" "r" #'denote-explore-random-regex
                   :desc "link" "l" #'denote-explore-random-link
                   :desc "keyword" "k" #'denote-explore-random-keyword)

                  (:prefix ("j" . "janitor")
                   :desc "duplicate notes" "d" #'denote-explore-duplicate-notes
                   :desc "duplicate notes(dired)" "D" #'denote-explore-duplicate-notes-dired
                   :desc "missing links" "l" #'denote-explore-missing-links
                   :desc "zero keywords" "z" #'denote-explore-zero-keywords
                   :desc "single keywords" "k" #'denote-explore-single-keywords
                   :desc "rename keywords" "r" #'denote-explore-rename-keywords
                   :desc "sync metadata" "s" #'denote-explore-sync-metadata
                   :desc "isolated files" "i" #'denote-explore-isolated-files)))))

(after! denote
  (unless (boundp 'denote-id-regexp)
    ;; Try to find the actual variable name in your denote version
    (setq denote-id-regexp
          (or (and (boundp 'denote-identifier-regexp) denote-identifier-regexp)
              "[0-9]\\{8\\}T[0-9]\\{6\\}"))))  ; fallback pattern

(use-package! consult-denote
  :config
  (consult-denote-mode 1))

(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "Search notes" "s" #'consult-denote-find
       :desc "Search notes w/grep" "S"
       #'consult-denote-grep))

(use-package! denote-journal
  :after denote
  :config
  (setq denote-journal-title-format "%Y-%m-%e"))

(map! :leader
      (:prefix-map ("d" . "denote")
       :desc "find/create journal" "j" #'denote-journal-new-or-existing-entry
       :desc "find/create journal w/date" "J" #'(lambda ()
                                                  (interactive)
                                                  (let ((current-prefix-arg '(4)))
                                                    (call-interactively #'denote-journal-new-or-existing-entry)))
       (:prefix ("i" . "insert")
        :desc "insert journal link" "j" #'denote-journal-link-or-create-entry
        :desc "insert journal link w/date" "J" #'(lambda ()
                                                   (interactive)
                                                   (let ((current-prefix-arg '(4)))
                                                     (call-interactively #'denote-journal-link-or-create-entry))))))

;; Simple denote completion formatting
(defun my-format-denote-candidate (file)
  "Format denote file for completion display with right-aligned keywords."
  (when (string-match-p "[0-9]\\{8\\}T[0-9]\\{6\\}" file)
    (let* ((full-path (expand-file-name file (denote-directory)))
           (date-str (ignore-errors (denote-retrieve-filename-identifier full-path)))
           (title (ignore-errors (denote-retrieve-filename-title full-path)))
           (keywords (ignore-errors (denote-retrieve-filename-keywords full-path))))
      (when date-str
        (let* ((formatted-date (format "[ %s-%s-%s ]"
                                      (substring date-str 0 4)
                                      (substring date-str 4 6)
                                      (substring date-str 6 8)))
               (formatted-title (if title
                                  (replace-regexp-in-string "-" " " title)
                                ""))
               (formatted-keywords (cond
                                   ((listp keywords) 
                                    (mapconcat (lambda (k) (replace-regexp-in-string "_" " " k)) keywords " "))
                                   ((stringp keywords) 
                                    (replace-regexp-in-string "_" " " keywords))
                                   (t "")))
               ;; Calculate padding to right-align keywords dynamically
               (left-part (format "%s %s" formatted-date formatted-title))
               (window-width (window-width (minibuffer-window)))
               (padding-needed (max 1 (- window-width (length left-part) (length formatted-keywords) 2)))
               (padding (make-string padding-needed ?\s)))
          
          (if (and formatted-keywords (not (string-empty-p formatted-keywords)))
              (format "%s%s%s" left-part padding formatted-keywords)
            left-part))))))

;; Override the denote file prompt function
(defun my-denote-file-prompt (&optional files-matching-regexp prompt-text no-require-match &rest _ignore)
  "Custom denote file prompt with formatted display."
  (let* ((files (denote-directory-files files-matching-regexp))
         (file-alist (mapcar (lambda (file)
                              (let* ((relative-file (denote-get-file-name-relative-to-denote-directory file))
                                     (formatted (my-format-denote-candidate relative-file)))
                                (cons (or formatted relative-file) file)))
                            files))
         (choice (completing-read 
                 (or prompt-text "Select file: ")
                 file-alist nil
                 (unless no-require-match :require-match))))
    (cdr (assoc choice file-alist))))

;; Apply the override
(advice-add 'denote-file-prompt :override #'my-denote-file-prompt)

;; (projectile-add-known-project "~/org")
(projectile-add-known-project "~/denote")
;; (projectile-add-known-project "~/roam")
(projectile-add-known-project "~/stow")
